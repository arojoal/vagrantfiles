# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # ensure priority on virtualbox provider
  config.vm.provider "virtualbox"
  config.vm.provider "lxc"
  config.vm.provider "qemu"

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "generic/ubuntu1804"
#  config.vm.box_version = "<= 0.0.1"

  # with current site.pp, vanilla ubuntu images can be used
  #config.vm.box = "ubuntu/bionic64"
  #config.vm.box_version = "20200311.0.0"

  config.vm.provider "lxc" do |lxc, override|
    override.vm.box = "isc/lxc-ubuntu-18.04"
    override.vm.box_version = "2"
  end

  config.vm.hostname = "ror"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  config.vm.network :forwarded_port, guest:3000, host:3000 #http
  config.vm.network :forwarded_port, guest:3443, host:3443 #https
  config.vm.network :forwarded_port, guest:3306, host:3306 #mysql
  config.vm.network :forwarded_port, guest:3035, host:3035
  config.vm.network :forwarded_port, guest:8080, host:8080
  config.vm.network :forwarded_port, guest:4200, host:4200 #angular

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network :private_network, ip: "192.168.33.21"
  config.vm.network :public_network, ip: "192.168.1.39"
  #config.vm.network :public_network, ip: "192.168.1.103" ####CASA MEDINA

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../puppet", "/puppet"
  config.vm.synced_folder "data", "/vagrant_data"
  config.vm.synced_folder "www", "/var/www"

  # solve permissions problems using lxc.
  # this requires `vagrant plugin install vagrant-bindfs`
  #config.vm.provider "lxc" do |lxc, override|

  #  # create fuse node until created by lxc. See https://github.com/maruos/maruos/issues/65#issuecomment-287817903
  #  override.vm.provision :shell, run: 'always', name: 'creating fuse /dev node' do |shell|
  #    shell.inline = "[ -e /dev/fuse ] || mknod -m 666 /dev/fuse c 10 229"
  #  end
  #  override.vm.synced_folder "www", "/var/www", disabled: true
  #  override.vm.synced_folder "www", "/var/www-lxc"
  #  override.bindfs.bind_folder "/var/www-lxc", "/var/www", after: :provision
  #end

  # to solve realtime changes and permission issues
  #
  # this needs `vagrant plugin install vagrant-bindfs` and comment
  # previous share of 'www' above
  #
  # config.vm.synced_folder "www", "/var/www-nfs", type: "nfs"
  # config.bindfs.bind_folder "/var/www-nfs", "/var/www"
  
  # mount_options taken from https://stackoverflow.com/a/28118716
  # config.vm.synced_folder "www", "/var/www-nfs", type: "nfs", mount_options: ['nolock,vers=3,udp,noatime,actimeo=1']
  # config.bindfs.bind_folder "/var/www-nfs", "/var/www"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provision :shell do |shell|
    shell.inline = "/usr/bin/apt-get update"
  end

  config.vm.provider "qemu" do |qe|
    qe.arch = "x86_64"
    qe.machine = "q35"
    qe.cpu = "max"
    qe.net_device = "virtio-net-pci"
  end

  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    vb.gui = true
    #
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "3072"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.name = "ror-opportunities-20-04b"
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file trusty64-puppet.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  
  config.vm.provider "lxc" do |lxc, override|
    # this requires `vagrant plugin install vagrant-puppet-install`
    override.puppet_install.puppet_version = "6.12.0"
  end
  
  config.vm.provision :puppet do |puppet|
    puppet.options           = "--verbose --debug"
    puppet.environment_path  = "environments"
    puppet.environment       = "dev"
    puppet.manifests_path    = "manifests"
    puppet.manifest_file     = "site.pp"
    puppet.module_path       = [Dir.pwd + "/../puppet/hiera", Dir.pwd + "/../puppet/modules_sp", Dir.pwd + "/../puppet/modules"]
    puppet.hiera_config_path = Dir.pwd + "/../puppet/hiera.yaml"
  end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
